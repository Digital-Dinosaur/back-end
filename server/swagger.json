{
  "swagger": "2.0",
  "info": {
    "description": "API for interfacing with the front end of infinite-landscape",
    "version": "1.0.0",
    "title": "Infinite Landscape API",
    "contact": {
      "email": "percivaltanner@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://github.com/git/git-scm.com/blob/main/MIT-LICENSE.txt"
    }
  },
  "host": "virtserver.swaggerhub.com",
  "basePath": "/Tanner253/Infinite-Landscape/1.0.0",
  "tags": [
    {
      "name": "story",
      "description": "everything about the stories rendered on the front end"
    },
    {
      "name": "graph",
      "description": "Access Graph data"
    },
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/story": {
      "get": {
        "tags": [
          "story"
        ],
        "summary": "gets all stories",
        "description": "hit this api endpoint to recieve all stories available to you",
        "operationId": "app.get('/stories')",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Story"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      },
      "post": {
        "tags": [
          "story"
        ],
        "summary": "Add a new story to the store",
        "operationId": "app.post('/story')",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Story object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Story"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/story/{storyId}": {
      "get": {
        "tags": [
          "story"
        ],
        "summary": "Find story by ID",
        "description": "Returns a single story",
        "operationId": "getstoryById",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "storyId",
            "in": "path",
            "description": "ID of story to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Story"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "story not found"
          }
        }
      },
      "put": {
        "tags": [
          "story"
        ],
        "summary": "Update an existing story",
        "operationId": "app.put('/story/:id')",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "storyId",
            "in": "path",
            "description": "ID of story to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Story not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "story"
        ],
        "summary": "Deletes a story",
        "operationId": "app.delete('/story/:id')",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "storyId",
            "in": "path",
            "description": "story id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Story not found"
          }
        }
      }
    },
    "/graph": {
      "get": {
        "tags": [
          "graph"
        ],
        "summary": "Returns story inventories by status",
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "graph"
        ],
        "summary": "Add a new graph to the store",
        "operationId": "app.post('/graph')",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/graph/{graphId}": {
      "get": {
        "tags": [
          "graph"
        ],
        "summary": "Find graph by ID",
        "description": "Returns a single story",
        "operationId": "app.get('/graph/:id')",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "graphId",
            "in": "path",
            "description": "ID of graph to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Adjacencies"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "graph not found"
          }
        }
      },
      "put": {
        "tags": [
          "graph"
        ],
        "summary": "Update an existing graph",
        "operationId": "app.put('/graph/:id')",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "graphId",
            "in": "path",
            "description": "ID of story to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Graph not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "graph"
        ],
        "summary": "Deletes a graph",
        "operationId": "app.delete('/graph/:id')",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "graphId",
            "in": "path",
            "description": "graph id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Graph not found"
          }
        }
      }
    },
    "/signup": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SignUp"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/signin": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "operationId": "loginUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            },
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "operationId": "logoutUser",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "operationId": "getUserByName",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Story": {
      "type": "object",
      "required": [
        "description",
        "group",
        "label",
        "penName",
        "username"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "label": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "penName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "group": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Str"
          }
        },
        "color": {
          "type": "string"
        },
        "tooltips": {
          "type": "object",
          "properties": {}
        },
        "neighbors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Int"
          }
        }
      }
    },
    "SignUp": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "contributions",
        "favorites",
        "history",
        "username"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "history": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Str"
          }
        },
        "favorites": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Str"
          }
        },
        "contributions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Str"
          }
        }
      }
    },
    "Adjacencies": {
      "type": "object",
      "required": [
        "neighbors",
        "storyId"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "storyId": {
          "type": "integer",
          "format": "int64"
        },
        "neighbors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Int"
          }
        }
      }
    },
    "Int": {
      "type": "object",
      "properties": {
        "item": {
          "type": "integer"
        }
      }
    },
    "Str": {
      "type": "object",
      "properties": {
        "item": {
          "type": "string"
        }
      }
    }
  }
}